// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SquidGameServiceClient is the client API for SquidGameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SquidGameServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// funciones de jugadores
	JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error)
	SendPlays(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error)
	AmountCheck(ctx context.Context, in *AmountRequest, opts ...grpc.CallOption) (*AmountReply, error)
	DeadOrAlive(ctx context.Context, in *DeadRequest, opts ...grpc.CallOption) (*DeadReply, error)
	Started(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error)
}

type squidGameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSquidGameServiceClient(cc grpc.ClientConnInterface) SquidGameServiceClient {
	return &squidGameServiceClient{cc}
}

func (c *squidGameServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/grpc.SquidGameService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squidGameServiceClient) JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := c.cc.Invoke(ctx, "/grpc.SquidGameService/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squidGameServiceClient) SendPlays(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := c.cc.Invoke(ctx, "/grpc.SquidGameService/SendPlays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squidGameServiceClient) AmountCheck(ctx context.Context, in *AmountRequest, opts ...grpc.CallOption) (*AmountReply, error) {
	out := new(AmountReply)
	err := c.cc.Invoke(ctx, "/grpc.SquidGameService/AmountCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squidGameServiceClient) DeadOrAlive(ctx context.Context, in *DeadRequest, opts ...grpc.CallOption) (*DeadReply, error) {
	out := new(DeadReply)
	err := c.cc.Invoke(ctx, "/grpc.SquidGameService/DeadOrAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squidGameServiceClient) Started(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := c.cc.Invoke(ctx, "/grpc.SquidGameService/Started", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SquidGameServiceServer is the server API for SquidGameService service.
// All implementations must embed UnimplementedSquidGameServiceServer
// for forward compatibility
type SquidGameServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// funciones de jugadores
	JoinGame(context.Context, *JoinRequest) (*JoinReply, error)
	SendPlays(context.Context, *SendRequest) (*SendReply, error)
	AmountCheck(context.Context, *AmountRequest) (*AmountReply, error)
	DeadOrAlive(context.Context, *DeadRequest) (*DeadReply, error)
	Started(context.Context, *StartRequest) (*StartReply, error)
	mustEmbedUnimplementedSquidGameServiceServer()
}

// UnimplementedSquidGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSquidGameServiceServer struct {
}

func (UnimplementedSquidGameServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSquidGameServiceServer) JoinGame(context.Context, *JoinRequest) (*JoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedSquidGameServiceServer) SendPlays(context.Context, *SendRequest) (*SendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlays not implemented")
}
func (UnimplementedSquidGameServiceServer) AmountCheck(context.Context, *AmountRequest) (*AmountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmountCheck not implemented")
}
func (UnimplementedSquidGameServiceServer) DeadOrAlive(context.Context, *DeadRequest) (*DeadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeadOrAlive not implemented")
}
func (UnimplementedSquidGameServiceServer) Started(context.Context, *StartRequest) (*StartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Started not implemented")
}
func (UnimplementedSquidGameServiceServer) mustEmbedUnimplementedSquidGameServiceServer() {}

// UnsafeSquidGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SquidGameServiceServer will
// result in compilation errors.
type UnsafeSquidGameServiceServer interface {
	mustEmbedUnimplementedSquidGameServiceServer()
}

func RegisterSquidGameServiceServer(s grpc.ServiceRegistrar, srv SquidGameServiceServer) {
	s.RegisterService(&SquidGameService_ServiceDesc, srv)
}

func _SquidGameService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SquidGameService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquidGameService_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServiceServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SquidGameService/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServiceServer).JoinGame(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquidGameService_SendPlays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServiceServer).SendPlays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SquidGameService/SendPlays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServiceServer).SendPlays(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquidGameService_AmountCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServiceServer).AmountCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SquidGameService/AmountCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServiceServer).AmountCheck(ctx, req.(*AmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquidGameService_DeadOrAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServiceServer).DeadOrAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SquidGameService/DeadOrAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServiceServer).DeadOrAlive(ctx, req.(*DeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquidGameService_Started_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServiceServer).Started(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SquidGameService/Started",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServiceServer).Started(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SquidGameService_ServiceDesc is the grpc.ServiceDesc for SquidGameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SquidGameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.SquidGameService",
	HandlerType: (*SquidGameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SquidGameService_SayHello_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _SquidGameService_JoinGame_Handler,
		},
		{
			MethodName: "SendPlays",
			Handler:    _SquidGameService_SendPlays_Handler,
		},
		{
			MethodName: "AmountCheck",
			Handler:    _SquidGameService_AmountCheck_Handler,
		},
		{
			MethodName: "DeadOrAlive",
			Handler:    _SquidGameService_DeadOrAlive_Handler,
		},
		{
			MethodName: "Started",
			Handler:    _SquidGameService_Started_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/squidgame.proto",
}
